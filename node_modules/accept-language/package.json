{
  "name": "accept-language",
  "version": "2.0.16",
  "description": "HTTP Accept-Language parser for node",
  "main": "index.js",
  "scripts": {
    "test": "./binaries/test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tinganho/node-accept-language.git"
  },
  "keywords": [
    "accept-language",
    "i18n",
    "parser"
  ],
  "author": {
    "name": "Tingan Ho",
    "email": "tingan87@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/tinganho/node-accept-language/issues"
  },
  "homepage": "https://github.com/tinganho/node-accept-language",
  "devDependencies": {
    "sinon": "~1.9.1",
    "sinon-chai": "~2.5.0",
    "mocha": "^2.2.5",
    "chai": "~1.9.1"
  },
  "dependencies": {
    "bcp47": "^1.1.2"
  },
  "readme": "accept-language [![Build Status](https://travis-ci.org/tinganho/node-accept-language.png)](https://travis-ci.org/tinganho/node-accept-language)\n========================\n\n[![NPM](https://nodei.co/npm/accept-language.png?downloads=true&stars=true)](https://nodei.co/npm/accept-language/)\n\n`accept-language` parses HTTP Accept-Language header and returns the most likely language or a consumable array of languages.\n\n### Installation:\n\n```\nnpm install accept-language --save\n```\n\n### Usage:\n\n```javascript\nvar acceptLanguage = require('accept-language');\nacceptLanguage.languages(['en-US', 'zh-CN']);\nconsole.log(acceptLanguage.get('en-GB,en;q=0.8,sv'));\n/*\n\n'en-US'\n\n*/\nvar language = acceptLanguage.parse('en-GB,en;q=0.8,sv');\nconsole.log(language);\n/*\n\n[\n  {\n    value: 'en-US',\n    language: \"en\",\n    region: \"US\",\n    quality: 1.0\n  }\n];\n\n*/\n```\n### Recommended usage with L10ns:\n[L10ns][] is an internationalization workflow and formatting tool. This library was specifically built for [L10ns](http://l10ns.org). [L10ns][] is a very good alternative to Gettext and all of it's tooling support–XGettext, PoEdit, custom libraries etc.\n\n### API\n#### acceptLanguage.languages(Array languageTags);\nDefine your language tags ordered in highest priority comes first fashion. The language tags must comply with [BCP47][] standard. The [BCP47][] language tag consist of at least the following subtags:\n\n1. A language subtag (`en`, `zh`).\n3. A script subtag (`Hant`, `Latn`).\n2. A region subtag (`US`, `CN`).\n\nThen language tag has the following syntax:\n\n```\nlanguage[-script][-region]\n```\n\nWhich makes the following language tags `en`, `en-US` and `zh-Hant-TW` all [BCP47][] compliant. Please note that the script tag refers to language script. Some languages use two character sets instead of one. Chinese is a good example of having two character sets instead of one–it has both traditional characters and simplified characters. And for popular languages that uses two or more scripts please specify the script subtag, because it can make an i18n library fetch more specific locale data.\n\n```javascript\nacceptLanguage.languages(['en-US', 'zh-CN']);\n```\n\n#### acceptLanguage.get(String acceptLanguageString);\nGet the most likely language given an `Accept-Language` string. In order for it to work you must set all your languages first.\n```javascript\nacceptLanguage.get('en-GB,en;q=0.8,sv');\n```\n\n#### acceptLanguage.parse(String acceptLanguageString);\nParse an `Accept-Language` string and get a consumable array of languages. In order for it to work you must set all your language tags first.\n```javascript\nacceptLanguage.parse('en-GB,en;q=0.8,sv');\n```\n\n### Maintainer\n\nTingan Ho [@tingan87][]\n\n### License\nMIT\n\n[L10ns]: http://l10ns.org\n[BCP47]: https://tools.ietf.org/html/bcp47\n[@tingan87]: https://twitter.com/tingan87\n",
  "readmeFilename": "README.md",
  "_id": "accept-language@2.0.16",
  "dist": {
    "shasum": "02c410065363432f3c37d9178faa02ca14b2f06d"
  },
  "_from": "accept-language@",
  "_resolved": "https://registry.npmjs.org/accept-language/-/accept-language-2.0.16.tgz"
}
